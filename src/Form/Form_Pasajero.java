/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Form;

import Clases.Pasajero;
import Form.Form_Principal;
import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JComboBox;
import javax.swing.JList;
import javax.swing.JOptionPane;

/**
 *
 * @author Dairo Arenas
 */
public class Form_Pasajero extends javax.swing.JFrame {
    String nombre;
    String documento;
    String asiento;
    HashMap<String, String> hashmap = new HashMap<>();
    Form_Principal formPrincipal;
    /**
     * Creates new form Form_Pasajero
     * @param hashmap_
     * @param principal
     */
    public Form_Pasajero(HashMap<String, String> hashmap_,Form_Principal principal) {
        try {
            this.formPrincipal = principal; 
            initComponents();

            hashmap = hashmap_;

            // Llenar el JComboBox con las claves del HashMap
            for (String key : hashmap.keySet()) {
                ComboAsiento.addItem(key); // Agregar todas las claves al JComboBox
            }

            ComboAsiento.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                Component c = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);

                // Asegurarse de que el valor no sea nulo antes de usar toString()
                if (value != null) {
                    String key = value.toString();

                    // Verificar si el valor existe en el HashMap y asignar "0" si no existe
                    String asientoStatus = hashmap.getOrDefault(key, "0");

                    if ("1".equals(asientoStatus)) {
                        // Mostrar que el asiento está deshabilitado en gris
                        c.setForeground(Color.GRAY);
                    } else {
                        // Mostrar asientos disponibles en negro
                        c.setForeground(Color.BLACK);
                    }
                } else {
                    // Manejo en caso de que el valor sea nulo (opcional, dependiendo de la lógica)
                    c.setForeground(Color.BLACK); // Color predeterminado para elementos nulos
                }

                return c;
            }
        });
                        
            ordenarComboBox(ComboAsiento);
        
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al guardar el pasajero: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        
    }
    // Renderizador personalizado para desactivar las opciones con valor "1"
    
    private void ordenarComboBox(JComboBox<String> comboBox) {
        // Obtener los elementos actuales
        List<String> items = new ArrayList<>();
        for (int i = 0; i < comboBox.getItemCount(); i++) {
            items.add(comboBox.getItemAt(i)); // Agregar cada elemento a la lista
        }

        // Ordenar la lista
        Collections.sort(items); // Ordenar alfabéticamente

        // Limpiar el JComboBox y volver a agregar los elementos ordenados
        comboBox.removeAllItems(); // Limpiar el JComboBox
        for (String item : items) {
            comboBox.addItem(item); // Agregar los elementos ordenados
        }
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TxtDocumento = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        TxtNombre = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        ComboAsiento = new javax.swing.JComboBox<>();
        BtnGuardar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Documento");

        jLabel2.setText("Nombre");

        jLabel3.setText("Asientos disponibles");

        ComboAsiento.setSelectedItem(hashmap);

        BtnGuardar.setText("GUARDAR");
        BtnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnGuardarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(TxtNombre)
                    .addComponent(TxtDocumento)
                    .addComponent(ComboAsiento, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BtnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(64, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TxtDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TxtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ComboAsiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE)
                .addComponent(BtnGuardar)
                .addGap(35, 35, 35))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnGuardarActionPerformed
        try {
            String nombre = TxtNombre.getText();
            String documento = TxtDocumento.getText();
            // Verificar si el ComboBox está habilitado y si se ha seleccionado un asiento
            if (!ComboAsiento.isEnabled() || ComboAsiento.getSelectedItem() == null) {
                JOptionPane.showMessageDialog(this, "Por favor, selecciona un asiento válido.", "Error", JOptionPane.ERROR_MESSAGE);
                return; // Salir del método si no hay asiento seleccionado o ComboBox desactivado
            } else {
                // Verificación al momento de hacer la selección
            String asiento = (String) ComboAsiento.getSelectedItem();

            if (asiento == null) {
                // Si no hay selección
                JOptionPane.showMessageDialog(this, "Por favor, selecciona un asiento.", "Error", JOptionPane.ERROR_MESSAGE);
                return; // Salir del método si no hay selección
            }

            // Verificar el estado del asiento en el HashMap
            String asientoStatus = hashmap.getOrDefault(asiento, "0");

            if ("1".equals(asientoStatus)) {
                // Si el asiento está marcado como deshabilitado, mostrar mensaje y no crear el objeto Pasajero
                JOptionPane.showMessageDialog(this, "Este asiento no está disponible. Por favor, selecciona otro.", "Asiento No Disponible", JOptionPane.ERROR_MESSAGE);
                ComboAsiento.setSelectedIndex(-1); // Resetea la selección
                return; // Salir del método para no crear el objeto Pasajero
            }

            // Si el asiento está disponible, continuar y crear el objeto Pasajero
            Pasajero pasajero = new Pasajero(nombre, documento, asiento);
            formPrincipal.AsignarPasajero(hashmap, pasajero);
            this.dispose(); // Cierra el formulario correctamente
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al guardar el pasajero: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_BtnGuardarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Form_Pasajero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Form_Pasajero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Form_Pasajero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Form_Pasajero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new Form_Pasajero().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnGuardar;
    private javax.swing.JComboBox<String> ComboAsiento;
    private javax.swing.JTextField TxtDocumento;
    private javax.swing.JTextField TxtNombre;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
}
